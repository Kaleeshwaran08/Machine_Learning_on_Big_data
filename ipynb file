{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lx9-Fre4FMda"
      },
      "source": [
        "# **Machine Learning on Big Data**\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XebXButSn_aO"
      },
      "source": [
        "---\n",
        "\n",
        "# **Section 1: Design and Build Machine Learning methods on a large-sized data**\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "j6z535U4-SSl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GdMZR-9QTwG3"
      },
      "source": [
        "\n",
        "# **Initiate and Configure Spark**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_z0p88Xtw_3-",
        "outputId": "b43cb916-d3b0-49d4-f857-464d841701d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting pyspark\n",
            "  Downloading pyspark-3.4.0.tar.gz (310.8 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m310.8/310.8 MB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.9/dist-packages (from pyspark) (0.10.9.7)\n",
            "Building wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-3.4.0-py2.py3-none-any.whl size=311317145 sha256=941ae4b32138413eb6dc4d70cfede2867eb701ead9edddc78809db65698e884a\n",
            "  Stored in directory: /root/.cache/pip/wheels/9f/34/a4/159aa12d0a510d5ff7c8f0220abbea42e5d81ecf588c4fd884\n",
            "Successfully built pyspark\n",
            "Installing collected packages: pyspark\n",
            "Successfully installed pyspark-3.4.0\n"
          ]
        }
      ],
      "source": [
        "pip install pyspark"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M99gHxJYW1Vn"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql import SparkSession\n",
        "from pyspark.ml.feature import VectorAssembler\n",
        "from pyspark.ml.feature import StandardScaler\n",
        "from pyspark.ml.clustering import KMeans\n",
        "from pyspark.ml.evaluation import ClusteringEvaluator\n",
        "from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n",
        "from pyspark.mllib.evaluation import MulticlassMetrics\n",
        "import matplotlib.pyplot as plt\n",
        "from pyspark.ml import Pipeline\n",
        "from pyspark.ml.classification import LogisticRegression\n",
        "from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n",
        "from pyspark.mllib.evaluation import MulticlassMetrics\n",
        "from pyspark.ml.feature import RegexTokenizer\n",
        "from pyspark.ml.feature import HashingTF, IDF\n",
        "import seaborn as sns\n",
        "from matplotlib import pyplot as plt\n",
        "from pyspark.ml import Pipeline\n",
        "from pyspark.ml.classification import GBTClassifier\n",
        "from pyspark.ml.feature import VectorIndexer, VectorAssembler\n",
        "from pyspark.ml.evaluation import BinaryClassificationEvaluator\n",
        "from pyspark.ml.linalg import DenseVector"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Mj1c_NrvW3bU"
      },
      "outputs": [],
      "source": [
        "spark = SparkSession.builder.appName('CN7030').getOrCreate()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RWR2FUMAL7WC",
        "outputId": "383e9caa-a35f-4e97-a934-f5824fcc2542"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6P2CZVl6TOQX"
      },
      "source": [
        "\n",
        "# **Load Data**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A-Y5bzK9mvo3"
      },
      "source": [
        "### Explain Data shortly here:\n",
        "\n",
        "Through the identification of a suitable dataset, we are presented with an opportunity to elaborate on its attributes and applications. For example, when considering customer reviews as our chosen dataset, it is vital that our description covers every element which comprises this collection - such as ratings for products or services being reviewed; demographic information about customers providing feedback; various product categories in question etc. We must further assess size/formatting details and provide use cases appropriate to the context of research under consideration. Utilizing a formal scholarly tone while discussing these characteristics will enable us to draw upon empirical evidence strategically in order create depth within our analysis – ultimately leading to better informed conclusions derived from meaningful data-driven insights."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hc5GMMvdh5jD",
        "outputId": "7e9bfdf4-bd81-439b-9544-c228853be02e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- step: integer (nullable = true)\n",
            " |-- type: string (nullable = true)\n",
            " |-- amount: double (nullable = true)\n",
            " |-- nameOrig: string (nullable = true)\n",
            " |-- oldbalanceOrg: double (nullable = true)\n",
            " |-- newbalanceOrig: double (nullable = true)\n",
            " |-- nameDest: string (nullable = true)\n",
            " |-- oldbalanceDest: double (nullable = true)\n",
            " |-- newbalanceDest: double (nullable = true)\n",
            " |-- isFraud: integer (nullable = true)\n",
            " |-- isFlaggedFraud: integer (nullable = true)\n",
            "\n"
          ]
        }
      ],
      "source": [
        "dataset=spark.read.csv('/content/gdrive/MyDrive/Group 7/CN70302.csv', header=True, inferSchema=True)\n",
        "dataset.printSchema()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EUzPEVblXSRZ"
      },
      "outputs": [],
      "source": [
        "dataset=dataset.na.drop()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tw1sBv5TXaad",
        "outputId": "4c97298b-889e-44f8-9689-d99e00d1ef8f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+--------+--------+-----------+-------------+--------------+-----------+--------------+--------------+-------+--------------+--------------------+\n",
            "|step|    type|  amount|   nameOrig|oldbalanceOrg|newbalanceOrig|   nameDest|oldbalanceDest|newbalanceDest|isFraud|isFlaggedFraud|            features|\n",
            "+----+--------+--------+-----------+-------------+--------------+-----------+--------------+--------------+-------+--------------+--------------------+\n",
            "|   1| PAYMENT| 9839.64|C1231006815|     170136.0|     160296.36|M1979787155|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|\n",
            "|   1| PAYMENT| 1864.28|C1666544295|      21249.0|      19384.72|M2044282225|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|\n",
            "|   1|TRANSFER|   181.0|C1305486145|        181.0|           0.0| C553264065|           0.0|           0.0|      1|             0|(8,[0,1,2,6],[1.0...|\n",
            "|   1|CASH_OUT|   181.0| C840083671|        181.0|           0.0|  C38997010|       21182.0|           0.0|      1|             0|[1.0,181.0,181.0,...|\n",
            "|   1| PAYMENT|11668.14|C2048537720|      41554.0|      29885.86|M1230701703|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|\n",
            "|   1| PAYMENT| 7817.71|  C90045638|      53860.0|      46042.29| M573487274|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|\n",
            "|   1| PAYMENT| 7107.77| C154988899|     183195.0|     176087.23| M408069119|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|\n",
            "|   1| PAYMENT| 7861.64|C1912850431|    176087.23|     168225.59| M633326333|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|\n",
            "|   1| PAYMENT| 4024.36|C1265012928|       2671.0|           0.0|M1176932104|           0.0|           0.0|      0|             0|(8,[0,1,2],[1.0,4...|\n",
            "|   1|   DEBIT| 5337.77| C712410124|      41720.0|      36382.23| C195600860|       41898.0|      40348.79|      0|             0|[1.0,5337.77,4172...|\n",
            "+----+--------+--------+-----------+-------------+--------------+-----------+--------------+--------------+-------+--------------+--------------------+\n",
            "only showing top 10 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "dataset.columns\n",
        "assemble=VectorAssembler(inputCols=[\n",
        " 'step',\n",
        " 'amount',\n",
        " 'oldbalanceOrg',\n",
        " 'newbalanceOrig',\n",
        " 'oldbalanceDest',\n",
        " 'newbalanceDest',\n",
        " 'isFraud',\n",
        " 'isFlaggedFraud',\n",
        "], outputCol='features')\n",
        "assembled_data=assemble.transform(dataset)\n",
        "assembled_data.show(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iudveYzPggCc",
        "outputId": "eaa6b8c4-37a0-4948-d1d1-31ddf15680ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+--------+--------+-----------+-------------+--------------+-----------+--------------+--------------+-------+--------------+--------------------+--------------------+\n",
            "|step|    type|  amount|   nameOrig|oldbalanceOrg|newbalanceOrig|   nameDest|oldbalanceDest|newbalanceDest|isFraud|isFlaggedFraud|            features|        standardized|\n",
            "+----+--------+--------+-----------+-------------+--------------+-----------+--------------+--------------+-------+--------------+--------------------+--------------------+\n",
            "|   1| PAYMENT| 9839.64|C1231006815|     170136.0|     160296.36|M1979787155|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|(8,[0,1,2,3],[0.0...|\n",
            "|   1| PAYMENT| 1864.28|C1666544295|      21249.0|      19384.72|M2044282225|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|(8,[0,1,2,3],[0.0...|\n",
            "|   1|TRANSFER|   181.0|C1305486145|        181.0|           0.0| C553264065|           0.0|           0.0|      1|             0|(8,[0,1,2,6],[1.0...|(8,[0,1,2,6],[0.0...|\n",
            "|   1|CASH_OUT|   181.0| C840083671|        181.0|           0.0|  C38997010|       21182.0|           0.0|      1|             0|[1.0,181.0,181.0,...|[0.06400716202692...|\n",
            "|   1| PAYMENT|11668.14|C2048537720|      41554.0|      29885.86|M1230701703|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|(8,[0,1,2,3],[0.0...|\n",
            "|   1| PAYMENT| 7817.71|  C90045638|      53860.0|      46042.29| M573487274|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|(8,[0,1,2,3],[0.0...|\n",
            "|   1| PAYMENT| 7107.77| C154988899|     183195.0|     176087.23| M408069119|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|(8,[0,1,2,3],[0.0...|\n",
            "|   1| PAYMENT| 7861.64|C1912850431|    176087.23|     168225.59| M633326333|           0.0|           0.0|      0|             0|(8,[0,1,2,3],[1.0...|(8,[0,1,2,3],[0.0...|\n",
            "|   1| PAYMENT| 4024.36|C1265012928|       2671.0|           0.0|M1176932104|           0.0|           0.0|      0|             0|(8,[0,1,2],[1.0,4...|(8,[0,1,2],[0.064...|\n",
            "|   1|   DEBIT| 5337.77| C712410124|      41720.0|      36382.23| C195600860|       41898.0|      40348.79|      0|             0|[1.0,5337.77,4172...|[0.06400716202692...|\n",
            "+----+--------+--------+-----------+-------------+--------------+-----------+--------------+--------------+-------+--------------+--------------------+--------------------+\n",
            "only showing top 10 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "scale=StandardScaler(inputCol='features',outputCol='standardized')\n",
        "data_scale=scale.fit(assembled_data)\n",
        "data_scale_output=data_scale.transform(assembled_data)\n",
        "data_scale_output.show(10)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-4CU-C0yyDlo",
        "outputId": "6e288f25-c167-4a9a-d241-ad1f07d16255"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+-------+\n",
            "|isFraud|  count|\n",
            "+-------+-------+\n",
            "|      1|   1142|\n",
            "|      0|1047433|\n",
            "+-------+-------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "classFreq = dataset.groupBy(\"isFraud\").count()\n",
        "classFreq.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3yQyaE_syVpR",
        "outputId": "af80558d-bbfa-4888-fe14-3b549b885663"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(111835, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data= dataset.toPandas()\n",
        "data= data.sample(frac=1)\n",
        "# amount of fraud classes 492 rows.\n",
        "fraud_df = data.loc[data['isFraud'] == 1]\n",
        "non_fraud_df = data.loc[data['isFraud'] == 0][:110693]\n",
        "normal_distributed_df = pd.concat([fraud_df, non_fraud_df])\n",
        "# Shuffle dataframe rows\n",
        "new_df = normal_distributed_df.sample(frac=1, random_state=42)\n",
        "new_df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wHft1Jht1Qxl"
      },
      "source": [
        "\n",
        "# **Task 1 - One clustering method or recommendation system**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OcZfiIcq1Qxn",
        "outputId": "df30923d-15eb-4995-8801-50fb55e647fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Score: 0.1542030417121609\n",
            "Training Score: 0.7983306367989635\n",
            "Training Score: 0.6752163503743503\n",
            "Training Score: 0.6459685307093032\n",
            "Training Score: 0.5557326968833151\n",
            "Training Score: 0.6491412133717789\n",
            "Training Score: 0.6897722814329422\n",
            "Training Score: 0.6334389932936386\n",
            "Training Score: 0.6199442372074571\n",
            "Training Score: 0.6216017752012836\n",
            "Training Score: 0.6298342797782\n",
            "Training Score: 0.6387764365508685\n",
            "Training Score: 0.6359477697730929\n",
            "Training Score: 0.6048196171643448\n",
            "Training Score: 0.47812988128329886\n",
            "Training Score: 0.6001249293586843\n",
            "Training Score: 0.6033184952807441\n",
            "Training Score: 0.49806276564606616\n",
            "Training Score: 0.5633264981889069\n",
            "Training Score: 0.5365277137034665\n",
            "Training Score: 0.6085771855288347\n",
            "Training Score: 0.5103048248143857\n",
            "Training Score: 0.5767489326132557\n",
            "Training Score: 0.591614446811366\n",
            "Training Score: 0.5398366837365872\n",
            "Training Score: 0.5250290253806447\n",
            "Training Score: 0.5023617455611616\n",
            "Training Score: 0.6015148616717996\n",
            "Training Score: 0.46639164827726215\n",
            "Training Score: 0.5085309988028408\n",
            "Training Score: 0.4936393309657558\n",
            "Training Score: 0.46510552517265474\n",
            "Training Score: 0.46494999266145204\n",
            "Training Score: 0.5072288390945242\n",
            "Training Score: 0.4068199716800676\n",
            "Training Score: 0.42499898387152624\n",
            "Training Score: 0.475280832404011\n",
            "Training Score: 0.4914701511326529\n",
            "Training Score: 0.5420853622277529\n",
            "Training Score: 0.5155493067046041\n",
            "Training Score: 0.5189782344318847\n",
            "Training Score: 0.5142220800830841\n",
            "Training Score: 0.5005129825841393\n",
            "Training Score: 0.4921043612527524\n",
            "Training Score: 0.48484429075742724\n",
            "Training Score: 0.4850421788562463\n",
            "Training Score: 0.5322163613690594\n",
            "Training Score: 0.4907387115107465\n"
          ]
        }
      ],
      "source": [
        "training_score=[]\n",
        "evaluator = ClusteringEvaluator(predictionCol='prediction', featuresCol='standardized', \\\n",
        "                                metricName='silhouette', distanceMeasure='squaredEuclidean')\n",
        "for i in range(2,50):\n",
        "\n",
        "    KMeans_algo=KMeans(featuresCol='standardized', k=i)\n",
        "\n",
        "    KMeans_fit=KMeans_algo.fit(data_scale_output)\n",
        "\n",
        "    output=KMeans_fit.transform(data_scale_output)\n",
        "\n",
        "    score=evaluator.evaluate(output)\n",
        "\n",
        "    training_score.append(score)\n",
        "\n",
        "    print(\"Training Score:\",score)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IRGHM3rOsKvU"
      },
      "source": [
        "\n",
        "# **Task 2 - One multi classifier incorporating Ensemble techniques**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "pyGZWyotyqFO",
        "outputId": "6cdc257b-4ea6-4e62-c124-952ce8cc03c7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-9b51db4d0d36>:4: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  corr = data.corr()\n",
            "<ipython-input-13-9b51db4d0d36>:7: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  sub_sample_corr = new_df.corr()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2400x2000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Make sure we use the subsample in our correlation\n",
        "f, (ax1, ax2) = plt.subplots(2, 1, figsize=(24,20))\n",
        "# Entire DataFrame\n",
        "corr = data.corr()\n",
        "sns.heatmap(corr, cmap='coolwarm_r', annot_kws={'size':20}, ax=ax1)\n",
        "ax1.set_title(\"Imbalanced Correlation Matrix \\n (don't use for reference)\", fontsize=14)\n",
        "sub_sample_corr = new_df.corr()\n",
        "sns.heatmap(sub_sample_corr, cmap='coolwarm_r', annot_kws={'size':20}, ax=ax2)\n",
        "ax2.set_title('SubSample Correlation Matrix \\n (use for reference)', fontsize=14)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XSv_IDxczAO_"
      },
      "outputs": [],
      "source": [
        "train_data, test_data = dataset.randomSplit([.8,.2],seed=1234)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZNbP1QojeP5u",
        "outputId": "5a8c7248-5d8c-4f0a-aac9-a9ba19288ea0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+--------+-----------+\n",
            "|step|  amount|   nameDest|\n",
            "+----+--------+-----------+\n",
            "|   1| 9839.64|M1979787155|\n",
            "|   1| 1864.28|M2044282225|\n",
            "|   1|   181.0| C553264065|\n",
            "|   1|   181.0|  C38997010|\n",
            "|   1|11668.14|M1230701703|\n",
            "+----+--------+-----------+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "tokenizer = RegexTokenizer(inputCol=\"type\", outputCol=\"words\", pattern=\"\\\\W\")\n",
        "\n",
        "# adds a column 'words' to df after tokenization\n",
        "df = tokenizer.transform(dataset)\n",
        "\n",
        "df.select(['step','amount', 'nameDest']).show(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6oAJuyTBsRO-",
        "outputId": "fa3f7f3f-0638-4177-97b7-05d9bbcaf1e6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame[step: int, type: string, amount: double, nameOrig: string, oldbalanceOrg: double, newbalanceOrig: double, nameDest: string, oldbalanceDest: double, newbalanceDest: double, isFraud: int, isFlaggedFraud: int, features: vector, standardized: vector, rawPrediction: vector, probability: vector, prediction: double]\n",
            "+-------+--------+-----------+--------------------+\n",
            "|isFraud|  amount|   nameDest|            features|\n",
            "+-------+--------+-----------+--------------------+\n",
            "|      0|  911.76|C1364913072|[1.0,911.76,13356...|\n",
            "|      0| 8921.26| C558216562|[1.0,8921.26,7684...|\n",
            "|      0|13289.87|C1225616405|[1.0,13289.87,333...|\n",
            "|      0|15152.15|C1262822392|[1.0,15152.15,356...|\n",
            "|      0|17487.62|  C22805895|[1.0,17487.62,341...|\n",
            "|      0|17791.71| C540811471|[1.0,17791.71,106...|\n",
            "|      0|18851.44| C215145189|[1.0,18851.44,381...|\n",
            "|      0|20490.81| C878506901|[1.0,20490.81,596...|\n",
            "|      0| 21255.8|C1381128261|[1.0,21255.8,3113...|\n",
            "|      0|24936.34| C660143728|[1.0,24936.34,482...|\n",
            "|      0|25090.03|C1282788025|[1.0,25090.03,657...|\n",
            "|      0|27070.11|C1568059495|[1.0,27070.11,346...|\n",
            "|      0|34918.59|C1948471365|[1.0,34918.59,433...|\n",
            "|      0|38366.56| C214187874|[1.0,38366.56,654...|\n",
            "|      0|42012.45| C667346055|[1.0,42012.45,350...|\n",
            "|      0|42198.41| C597190999|[1.0,42198.41,406...|\n",
            "|      0|46630.53|C2083562754|[1.0,46630.53,737...|\n",
            "|      0|49236.53|C1983747920|[1.0,49236.53,821...|\n",
            "|      0|55091.05|C1831477404|[1.0,55091.05,173...|\n",
            "|      0|55837.16| C100555887|[1.0,55837.16,484...|\n",
            "+-------+--------+-----------+--------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# add your code here\n",
        "(trainingData, testData) = data_scale_output.randomSplit([0.8, 0.2], seed = 200)\n",
        "lr = LogisticRegression(featuresCol='features',\n",
        "                        labelCol='isFraud',\n",
        "                        family=\"multinomial\",\n",
        "                        regParam=0.3,\n",
        "                        elasticNetParam=0,\n",
        "                        maxIter=50)\n",
        "\n",
        "# train model with default parameters\n",
        "lrModel = lr.fit(trainingData)\n",
        "\n",
        "# get predictions for test set\n",
        "predictions = lrModel.transform(testData)\n",
        "print(predictions)\n",
        "# show top 20 predictions\n",
        "predictions.select('isFraud','amount', 'nameDest', 'features').show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r176RvNBjvay",
        "outputId": "7b97821a-174e-4c07-c202-1c8ff0edb67e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+--------+-----------+--------------------+\n",
            "|isFraud|  amount|   nameDest|            features|\n",
            "+-------+--------+-----------+--------------------+\n",
            "|      0|  911.76|C1364913072|[1.0,911.76,13356...|\n",
            "|      0| 8921.26| C558216562|[1.0,8921.26,7684...|\n",
            "|      0|13289.87|C1225616405|[1.0,13289.87,333...|\n",
            "|      0|15152.15|C1262822392|[1.0,15152.15,356...|\n",
            "|      0|17487.62|  C22805895|[1.0,17487.62,341...|\n",
            "|      0|17791.71| C540811471|[1.0,17791.71,106...|\n",
            "|      0|18851.44| C215145189|[1.0,18851.44,381...|\n",
            "|      0|20490.81| C878506901|[1.0,20490.81,596...|\n",
            "|      0| 21255.8|C1381128261|[1.0,21255.8,3113...|\n",
            "|      0|24936.34| C660143728|[1.0,24936.34,482...|\n",
            "|      0|25090.03|C1282788025|[1.0,25090.03,657...|\n",
            "|      0|27070.11|C1568059495|[1.0,27070.11,346...|\n",
            "|      0|34918.59|C1948471365|[1.0,34918.59,433...|\n",
            "|      0|38366.56| C214187874|[1.0,38366.56,654...|\n",
            "|      0|42012.45| C667346055|[1.0,42012.45,350...|\n",
            "|      0|42198.41| C597190999|[1.0,42198.41,406...|\n",
            "|      0|46630.53|C2083562754|[1.0,46630.53,737...|\n",
            "|      0|49236.53|C1983747920|[1.0,49236.53,821...|\n",
            "|      0|55091.05|C1831477404|[1.0,55091.05,173...|\n",
            "|      0|55837.16| C100555887|[1.0,55837.16,484...|\n",
            "+-------+--------+-----------+--------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from pyspark.ml.classification import RandomForestClassifier\n",
        "\n",
        "rf = RandomForestClassifier(featuresCol = 'features', labelCol = 'isFraud')\n",
        "rfModel = rf.fit(trainingData)\n",
        "predictions = rfModel.transform(testData)\n",
        "predictions.select('isFraud','amount', 'nameDest', 'features').show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = lrModel.transform(testData)\n",
        "evaluator = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"accuracy\")\n",
        "accuracy = evaluator.evaluate(predictions)\n",
        "print(\"Accuracy: {:.2f}%\".format(accuracy * 100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AVSY9IGqgXPe",
        "outputId": "42e80db2-7b88-4ce4-badf-66c297197277"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 99.90%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VML2BA-7YkEr"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Select (prediction, true label) and compute the accuracy and test error\n",
        "\n",
        "def customMulticlassClassificationEvaluator(modelname, predictions):\n",
        "\n",
        "  evaluator2 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"weightedRecall\")\n",
        "  weightedRecall = evaluator2.evaluate(predictions)\n",
        "\n",
        "  evaluator3 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"weightedPrecision\")\n",
        "  weightedPrecision = evaluator3.evaluate(predictions)\n",
        "\n",
        "  evaluator4 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"weightedTruePositiveRate\")\n",
        "  weightedTruePositiveRate = evaluator4.evaluate(predictions)\n",
        "\n",
        "  evaluator5 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"truePositiveRateByLabel\")\n",
        "  truePositiveRateByLabel = evaluator5.evaluate(predictions)\n",
        "\n",
        "  evaluator6 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"falsePositiveRateByLabel\")\n",
        "  falsePositiveRateByLabel = evaluator6.evaluate(predictions)\n",
        "\n",
        "  evaluator7 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"precisionByLabel\")\n",
        "  precisionByLabel = evaluator7.evaluate(predictions)\n",
        "\n",
        "  evaluator8 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"weightedFMeasure\")\n",
        "  weightedFMeasure = evaluator8.evaluate(predictions)\n",
        "\n",
        "  evaluator9 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"fMeasureByLabel\")\n",
        "  fMeasureByLabel = evaluator9.evaluate(predictions)\n",
        "\n",
        "  evaluator10 = MulticlassClassificationEvaluator(\n",
        "      labelCol=\"isFraud\", predictionCol=\"prediction\", metricName=\"recallByLabel\")\n",
        "  recallByLabel = evaluator10.evaluate(predictions)\n",
        "  f1 = evaluator10.evaluate(predictions)\n",
        "  return f1\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XxBXx0aRxAcm",
        "outputId": "87952659-d92c-4789-efcb-892afdf6bc32"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ],
      "source": [
        "r=customMulticlassClassificationEvaluator(rfModel, predictions)\n",
        "f=customMulticlassClassificationEvaluator(rfModel, predictions)\n",
        "res=(r+f)/2\n",
        "print(res)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7B_jAqyMsSsl"
      },
      "source": [
        "\n",
        "# **Task 3 - Performance Measurements**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tV__ckDIsTEF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560
        },
        "outputId": "5a2db0fa-c8c1-4824-8040-f64598ab004b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Cost')"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig, ax = plt.subplots(1,1, figsize =(8,6))\n",
        "ax.plot(range(2,50),training_score)\n",
        "ax.set_xlabel('K-Means')\n",
        "ax.set_ylabel('Cost')\n",
        "\n",
        "# print(f'Model name: {modelname}')\n",
        "# print(\"\\tAccuracy = %g \" %(accuracy))\n",
        "# print(\"\\tF1 = %g \" %(f1))\n",
        "# print(\"\\tTest Error = %g \" %(1.0 - accuracy))\n",
        "# print(\"\\tTrue Positive Rate By Label = %g \" %(truePositiveRateByLabel))\n",
        "# print(\"\\tFalse Positive Rate By Label = %g \" %(falsePositiveRateByLabel))\n",
        "# print(\"\\tPrecision By Label = %g \" %(precisionByLabel))\n",
        "# print(\"\\tRecall By Label = %g \" %(recallByLabel))\n",
        "# print(\"\\tFMeasure By Label = %g \" %(fMeasureByLabel))\n",
        "# print(\"\\tWeighted Recall = %g \" %(weightedRecall))\n",
        "# print(\"\\tWeighted Precision = %g \" %(weightedPrecision))\n",
        "# print(\"\\tWeighted True Positive Rate = %g \" %(weightedTruePositiveRate))\n",
        "# print(\"\\tWeighted FMeasure = %g \" %(weightedFMeasure))\n",
        "# print(\"\\tLog Loss = %g \" %(logLoss))\n",
        "# print(\"\\tHamming Loss = %g \" %(hammingLoss))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NfYAm9qHnbSe"
      },
      "source": [
        "---\n",
        "\n",
        "# **Section 2: Data Streaming Application**\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y7qufwqvnwPY"
      },
      "source": [
        "\n",
        "**Considered is the monitoring and analysis of Facebook feeds for the detection**\n",
        "\n",
        "One real-time streaming application that can be considered is the monitoring and analysis of Facebook feeds for the detection of hate speech and cyberbullying. This application can raise several Legal, Social, and Ethical (LSE) issues such as privacy, data protection, censorship, bias, and discrimination. It is important to consider the ethical implications of using such a system and ensure that it does not infringe on people's fundamental rights and freedoms.\n",
        "\n",
        "**Application Functionality:**\n",
        "\n",
        "The streaming application works by collecting data from Facebook in real-time. The data is then pre-processed, cleaned, and filtered to remove any irrelevant or offensive content. The cleaned data is then streamed to a processing engine such as Apache Kafka or Apache Spark Streaming. The processing engine performs various NLP and ML algorithms to identify hate speech, cyberbullying, and other forms of offensive language. The results of the analysis are then stored in a database or displayed in real-time on a dashboard.\n",
        "\n",
        "The model for low latency processing depends on the requirements of the application and the processing engine being used. One approach is to use micro-batching, where small batches of data are processed in near real-time to reduce the end-to-end latency. Fault tolerance guarantees can be achieved by using replication and distributed processing techniques.\n",
        "\n",
        "**Application Layers:**\n",
        "\n",
        "**a. Data source layer:**\n",
        "The data source for the streaming application is Facebook. Facebook provides APIs that can be used to access real-time data.\n",
        "The data source layer is responsible for collecting real-time data from Facebook. This layer can be implemented using APIs provided by Facebook, which allow developers to access real-time data such as posts and comments.\n",
        "\n",
        "**b. Streaming layer:**\n",
        "The streaming layer is responsible for ingesting, buffering, and delivering the real-time data to the processing layer. This layer can be implemented using various technologies such as Apache Kafka, Google Cloud Pub/Sub, Confluent, IBM MQ, Amazon MQ, Azure Event Hubs, or other similar technologies. These platforms provide scalable and fault-tolerant messaging systems for streaming data.\n",
        "\n",
        "**c. Streaming processing layer:**\n",
        "The streaming processing layer is responsible for processing the real-time data using machine learning and natural language processing algorithms. This layer can be implemented using frameworks such as Apache Spark, Hive, Kafka, or AWS. These platforms provide distributed processing frameworks for real-time data analysis and machine learning. The data can be cleaned, filtered, and transformed to identify patterns, sentiment, and other features.\n",
        "\n",
        "**d. Presentation layer:**\n",
        "The presentation layer for a Facebook streaming service would be responsible for displaying the results of the analysis in real-time to the end-users. This can be achieved using real-time dashboards such as Grafana, Kibana, or Tableau, which provide visualizations and insights into the real-time data analysis results. Matplotlib, Seaborn, Plotly, or other Python libraries can also be used for data visualization. The results can be displayed as charts, graphs, or other visualizations, and can be updated in real-time as new data arrives.\n",
        "\n",
        "Overall, a Facebook streaming service for monitoring and analysis of social media feeds for the detection of hate speech and cyberbullying would require careful consideration of Legal, Social, and Ethical (LSE) issues, such as privacy, data protection, censorship, bias, and discrimination. It can be implemented using various technologies and frameworks, and can provide valuable insights into online behavior and sentiment analysis on the Facebook platform.\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
